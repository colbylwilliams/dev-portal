'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreClient = require('@azure/core-client');

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (KnownAdapterInformationType) {
    KnownAdapterInformationType["AzureResourceManager"] = "AzureResourceManager";
    KnownAdapterInformationType["AzureDevOps"] = "AzureDevOps";
    KnownAdapterInformationType["GitHub"] = "GitHub";
    KnownAdapterInformationType["Kubernetes"] = "Kubernetes";
})(exports.KnownAdapterInformationType || (exports.KnownAdapterInformationType = {}));
(function (KnownResultErrorCode) {
    KnownResultErrorCode["Unknown"] = "Unknown";
    KnownResultErrorCode["Failed"] = "Failed";
    KnownResultErrorCode["Conflict"] = "Conflict";
    KnownResultErrorCode["NotFound"] = "NotFound";
    KnownResultErrorCode["ServerError"] = "ServerError";
    KnownResultErrorCode["ValidationError"] = "ValidationError";
    KnownResultErrorCode["Unauthorized"] = "Unauthorized";
    KnownResultErrorCode["Forbidden"] = "Forbidden";
})(exports.KnownResultErrorCode || (exports.KnownResultErrorCode = {}));
(function (KnownComponentType) {
    KnownComponentType["Environment"] = "Environment";
    KnownComponentType["Repository"] = "Repository";
    KnownComponentType["Namespace"] = "Namespace";
})(exports.KnownComponentType || (exports.KnownComponentType = {}));
(function (KnownComponentResourceState) {
    KnownComponentResourceState["Pending"] = "Pending";
    KnownComponentResourceState["Initializing"] = "Initializing";
    KnownComponentResourceState["Provisioning"] = "Provisioning";
    KnownComponentResourceState["Provisioned"] = "Provisioned";
    KnownComponentResourceState["Deprovisioning"] = "Deprovisioning";
    KnownComponentResourceState["Deprovisioned"] = "Deprovisioned";
    KnownComponentResourceState["Failed"] = "Failed";
})(exports.KnownComponentResourceState || (exports.KnownComponentResourceState = {}));
(function (KnownComponentTaskType) {
    KnownComponentTaskType["Custom"] = "Custom";
    KnownComponentTaskType["Create"] = "Create";
    KnownComponentTaskType["Delete"] = "Delete";
})(exports.KnownComponentTaskType || (exports.KnownComponentTaskType = {}));
(function (KnownComponentTaskState) {
    KnownComponentTaskState["Pending"] = "Pending";
    KnownComponentTaskState["Initializing"] = "Initializing";
    KnownComponentTaskState["Processing"] = "Processing";
    KnownComponentTaskState["Succeeded"] = "Succeeded";
    KnownComponentTaskState["Canceled"] = "Canceled";
    KnownComponentTaskState["Failed"] = "Failed";
})(exports.KnownComponentTaskState || (exports.KnownComponentTaskState = {}));
(function (KnownRepositoryReferenceProvider) {
    KnownRepositoryReferenceProvider["Unknown"] = "Unknown";
    KnownRepositoryReferenceProvider["GitHub"] = "GitHub";
    KnownRepositoryReferenceProvider["DevOps"] = "DevOps";
})(exports.KnownRepositoryReferenceProvider || (exports.KnownRepositoryReferenceProvider = {}));
(function (KnownRepositoryReferenceType) {
    KnownRepositoryReferenceType["Unknown"] = "Unknown";
    KnownRepositoryReferenceType["Tag"] = "Tag";
    KnownRepositoryReferenceType["Branch"] = "Branch";
    KnownRepositoryReferenceType["Hash"] = "Hash";
})(exports.KnownRepositoryReferenceType || (exports.KnownRepositoryReferenceType = {}));
(function (KnownComponentTaskTemplateType) {
    KnownComponentTaskTemplateType["Custom"] = "Custom";
    KnownComponentTaskTemplateType["Create"] = "Create";
    KnownComponentTaskTemplateType["Delete"] = "Delete";
})(exports.KnownComponentTaskTemplateType || (exports.KnownComponentTaskTemplateType = {}));
(function (KnownComponentTemplateType) {
    KnownComponentTemplateType["Environment"] = "Environment";
    KnownComponentTemplateType["Repository"] = "Repository";
    KnownComponentTemplateType["Namespace"] = "Namespace";
})(exports.KnownComponentTemplateType || (exports.KnownComponentTemplateType = {}));
(function (KnownDeploymentScopeType) {
    KnownDeploymentScopeType["AzureResourceManager"] = "AzureResourceManager";
    KnownDeploymentScopeType["AzureDevOps"] = "AzureDevOps";
    KnownDeploymentScopeType["GitHub"] = "GitHub";
    KnownDeploymentScopeType["Kubernetes"] = "Kubernetes";
})(exports.KnownDeploymentScopeType || (exports.KnownDeploymentScopeType = {}));
(function (KnownDeploymentScopeComponentTypesItem) {
    KnownDeploymentScopeComponentTypesItem["Environment"] = "Environment";
    KnownDeploymentScopeComponentTypesItem["Repository"] = "Repository";
    KnownDeploymentScopeComponentTypesItem["Namespace"] = "Namespace";
})(exports.KnownDeploymentScopeComponentTypesItem || (exports.KnownDeploymentScopeComponentTypesItem = {}));
(function (KnownDeploymentScopeDefinitionType) {
    KnownDeploymentScopeDefinitionType["AzureResourceManager"] = "AzureResourceManager";
    KnownDeploymentScopeDefinitionType["AzureDevOps"] = "AzureDevOps";
    KnownDeploymentScopeDefinitionType["GitHub"] = "GitHub";
    KnownDeploymentScopeDefinitionType["Kubernetes"] = "Kubernetes";
})(exports.KnownDeploymentScopeDefinitionType || (exports.KnownDeploymentScopeDefinitionType = {}));
(function (KnownCommandAuditEntityRuntimeStatus) {
    KnownCommandAuditEntityRuntimeStatus["Running"] = "Running";
    KnownCommandAuditEntityRuntimeStatus["Completed"] = "Completed";
    KnownCommandAuditEntityRuntimeStatus["ContinuedAsNew"] = "ContinuedAsNew";
    KnownCommandAuditEntityRuntimeStatus["Failed"] = "Failed";
    KnownCommandAuditEntityRuntimeStatus["Canceled"] = "Canceled";
    KnownCommandAuditEntityRuntimeStatus["Terminated"] = "Terminated";
    KnownCommandAuditEntityRuntimeStatus["Pending"] = "Pending";
    KnownCommandAuditEntityRuntimeStatus["Unknown"] = "Unknown";
})(exports.KnownCommandAuditEntityRuntimeStatus || (exports.KnownCommandAuditEntityRuntimeStatus = {}));
(function (KnownOrganizationResourceState) {
    KnownOrganizationResourceState["Pending"] = "Pending";
    KnownOrganizationResourceState["Initializing"] = "Initializing";
    KnownOrganizationResourceState["Provisioning"] = "Provisioning";
    KnownOrganizationResourceState["Provisioned"] = "Provisioned";
    KnownOrganizationResourceState["Deprovisioning"] = "Deprovisioning";
    KnownOrganizationResourceState["Deprovisioned"] = "Deprovisioned";
    KnownOrganizationResourceState["Failed"] = "Failed";
})(exports.KnownOrganizationResourceState || (exports.KnownOrganizationResourceState = {}));
(function (KnownUserType) {
    KnownUserType["User"] = "User";
    KnownUserType["Group"] = "Group";
    KnownUserType["System"] = "System";
    KnownUserType["Service"] = "Service";
})(exports.KnownUserType || (exports.KnownUserType = {}));
(function (KnownUserRole) {
    KnownUserRole["None"] = "None";
    KnownUserRole["Member"] = "Member";
    KnownUserRole["Admin"] = "Admin";
    KnownUserRole["Owner"] = "Owner";
    KnownUserRole["Adapter"] = "Adapter";
})(exports.KnownUserRole || (exports.KnownUserRole = {}));
(function (KnownProjectMembershipRole) {
    KnownProjectMembershipRole["None"] = "None";
    KnownProjectMembershipRole["Member"] = "Member";
    KnownProjectMembershipRole["Admin"] = "Admin";
    KnownProjectMembershipRole["Owner"] = "Owner";
    KnownProjectMembershipRole["Adapter"] = "Adapter";
})(exports.KnownProjectMembershipRole || (exports.KnownProjectMembershipRole = {}));
(function (KnownProjectResourceState) {
    KnownProjectResourceState["Pending"] = "Pending";
    KnownProjectResourceState["Initializing"] = "Initializing";
    KnownProjectResourceState["Provisioning"] = "Provisioning";
    KnownProjectResourceState["Provisioned"] = "Provisioned";
    KnownProjectResourceState["Deprovisioning"] = "Deprovisioning";
    KnownProjectResourceState["Deprovisioned"] = "Deprovisioned";
    KnownProjectResourceState["Failed"] = "Failed";
})(exports.KnownProjectResourceState || (exports.KnownProjectResourceState = {}));
(function (KnownScheduleDaysOfWeekItem) {
    KnownScheduleDaysOfWeekItem["Sunday"] = "Sunday";
    KnownScheduleDaysOfWeekItem["Monday"] = "Monday";
    KnownScheduleDaysOfWeekItem["Tuesday"] = "Tuesday";
    KnownScheduleDaysOfWeekItem["Wednesday"] = "Wednesday";
    KnownScheduleDaysOfWeekItem["Thursday"] = "Thursday";
    KnownScheduleDaysOfWeekItem["Friday"] = "Friday";
    KnownScheduleDaysOfWeekItem["Saturday"] = "Saturday";
})(exports.KnownScheduleDaysOfWeekItem || (exports.KnownScheduleDaysOfWeekItem = {}));
(function (KnownScheduleDefinitionDaysOfWeekItem) {
    KnownScheduleDefinitionDaysOfWeekItem["Sunday"] = "Sunday";
    KnownScheduleDefinitionDaysOfWeekItem["Monday"] = "Monday";
    KnownScheduleDefinitionDaysOfWeekItem["Tuesday"] = "Tuesday";
    KnownScheduleDefinitionDaysOfWeekItem["Wednesday"] = "Wednesday";
    KnownScheduleDefinitionDaysOfWeekItem["Thursday"] = "Thursday";
    KnownScheduleDefinitionDaysOfWeekItem["Friday"] = "Friday";
    KnownScheduleDefinitionDaysOfWeekItem["Saturday"] = "Saturday";
})(exports.KnownScheduleDefinitionDaysOfWeekItem || (exports.KnownScheduleDefinitionDaysOfWeekItem = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const AdapterInformationListDataResult = {
    type: {
        name: "Composite",
        className: "AdapterInformationListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AdapterInformation"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AdapterInformation = {
    type: {
        name: "Composite",
        className: "AdapterInformation",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            inputDataSchema: {
                serializedName: "inputDataSchema",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            inputDataForm: {
                serializedName: "inputDataForm",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResult = {
    type: {
        name: "Composite",
        className: "ErrorResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            errors: {
                serializedName: "errors",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResultError"
                        }
                    }
                }
            }
        }
    }
};
const ResultError = {
    type: {
        name: "Composite",
        className: "ResultError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            errors: {
                serializedName: "errors",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidationError"
                        }
                    }
                }
            }
        }
    }
};
const ValidationError = {
    type: {
        name: "Composite",
        className: "ValidationError",
        modelProperties: {
            field: {
                serializedName: "field",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentListDataResult = {
    type: {
        name: "Composite",
        className: "ComponentListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Component"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Component = {
    type: {
        name: "Composite",
        className: "Component",
        modelProperties: {
            href: {
                serializedName: "href",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String"
                }
            },
            organizationName: {
                serializedName: "organizationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            templateId: {
                serializedName: "templateId",
                required: true,
                type: {
                    name: "String"
                }
            },
            projectId: {
                serializedName: "projectId",
                required: true,
                type: {
                    name: "String"
                }
            },
            projectName: {
                serializedName: "projectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            creator: {
                serializedName: "creator",
                required: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            inputJson: {
                serializedName: "inputJson",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            valueJson: {
                serializedName: "valueJson",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            resourceUrl: {
                serializedName: "resourceUrl",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            resourceState: {
                serializedName: "resourceState",
                type: {
                    name: "String"
                }
            },
            deploymentScopeId: {
                serializedName: "deploymentScopeId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            deploymentScopeName: {
                serializedName: "deploymentScopeName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            identityId: {
                serializedName: "identityId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            deleted: {
                serializedName: "deleted",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            ttl: {
                serializedName: "ttl",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            slug: {
                serializedName: "slug",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentDefinition = {
    type: {
        name: "Composite",
        className: "ComponentDefinition",
        modelProperties: {
            templateId: {
                serializedName: "templateId",
                required: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            inputJson: {
                serializedName: "inputJson",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            deploymentScopeId: {
                serializedName: "deploymentScopeId",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentDataResult = {
    type: {
        name: "Composite",
        className: "ComponentDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "Component"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StatusResult = {
    type: {
        name: "Composite",
        className: "StatusResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            stateMessage: {
                serializedName: "stateMessage",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            errors: {
                serializedName: "errors",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResultError"
                        }
                    }
                }
            },
            trackingId: {
                serializedName: "_trackingId",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentTaskListDataResult = {
    type: {
        name: "Composite",
        className: "ComponentTaskListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComponentTask"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentTask = {
    type: {
        name: "Composite",
        className: "ComponentTask",
        modelProperties: {
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String"
                }
            },
            organizationName: {
                serializedName: "organizationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            componentId: {
                serializedName: "componentId",
                required: true,
                type: {
                    name: "String"
                }
            },
            componentName: {
                serializedName: "componentName",
                required: true,
                type: {
                    name: "String"
                }
            },
            projectId: {
                serializedName: "projectId",
                required: true,
                type: {
                    name: "String"
                }
            },
            projectName: {
                serializedName: "projectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestedBy: {
                serializedName: "requestedBy",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            scheduleId: {
                serializedName: "scheduleId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            typeName: {
                serializedName: "typeName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            created: {
                serializedName: "created",
                type: {
                    name: "DateTime"
                }
            },
            started: {
                serializedName: "started",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            finished: {
                serializedName: "finished",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            inputJson: {
                serializedName: "inputJson",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            output: {
                serializedName: "output",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            taskState: {
                serializedName: "taskState",
                type: {
                    name: "String"
                }
            },
            exitCode: {
                serializedName: "exitCode",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentTaskDefinition = {
    type: {
        name: "Composite",
        className: "ComponentTaskDefinition",
        modelProperties: {
            taskId: {
                serializedName: "taskId",
                required: true,
                type: {
                    name: "String"
                }
            },
            inputJson: {
                serializedName: "inputJson",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentTaskDataResult = {
    type: {
        name: "Composite",
        className: "ComponentTaskDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "ComponentTask"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentTemplateListDataResult = {
    type: {
        name: "Composite",
        className: "ComponentTemplateListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComponentTemplate"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentTemplate = {
    type: {
        name: "Composite",
        className: "ComponentTemplate",
        modelProperties: {
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String"
                }
            },
            organizationName: {
                serializedName: "organizationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            parentId: {
                serializedName: "parentId",
                required: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            repository: {
                serializedName: "repository",
                type: {
                    name: "Composite",
                    className: "RepositoryReference"
                }
            },
            permissions: {
                serializedName: "permissions",
                type: {
                    name: "Composite",
                    className: "ComponentTemplatePermissions"
                }
            },
            inputJsonSchema: {
                serializedName: "inputJsonSchema",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            tasks: {
                serializedName: "tasks",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComponentTaskTemplate"
                        }
                    }
                }
            },
            taskRunner: {
                serializedName: "taskRunner",
                type: {
                    name: "Composite",
                    className: "ComponentTaskRunner"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            folder: {
                serializedName: "folder",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            configuration: {
                serializedName: "configuration",
                nullable: true,
                type: {
                    name: "any"
                }
            },
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RepositoryReference = {
    type: {
        name: "Composite",
        className: "RepositoryReference",
        modelProperties: {
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            },
            token: {
                serializedName: "token",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            baselUrl: {
                serializedName: "baselUrl",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            mountUrl: {
                serializedName: "mountUrl",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            ref: {
                serializedName: "ref",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "provider",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            organization: {
                serializedName: "organization",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            repository: {
                serializedName: "repository",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            project: {
                serializedName: "project",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentTemplatePermissions = {
    type: {
        name: "Composite",
        className: "ComponentTemplatePermissions",
        modelProperties: {
            none: {
                serializedName: "None",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            member: {
                serializedName: "Member",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            admin: {
                serializedName: "Admin",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            owner: {
                serializedName: "Owner",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            adapter: {
                serializedName: "Adapter",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ComponentTaskTemplate = {
    type: {
        name: "Composite",
        className: "ComponentTaskTemplate",
        modelProperties: {
            id: {
                serializedName: "id",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            inputJsonSchema: {
                serializedName: "inputJsonSchema",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            typeName: {
                serializedName: "typeName",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentTaskRunner = {
    type: {
        name: "Composite",
        className: "ComponentTaskRunner",
        modelProperties: {
            id: {
                serializedName: "id",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            with: {
                serializedName: "with",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ComponentTemplateDataResult = {
    type: {
        name: "Composite",
        className: "ComponentTemplateDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "ComponentTemplate"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentScopeListDataResult = {
    type: {
        name: "Composite",
        className: "DeploymentScopeListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeploymentScope"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentScope = {
    type: {
        name: "Composite",
        className: "DeploymentScope",
        modelProperties: {
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String"
                }
            },
            organizationName: {
                serializedName: "organizationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            slug: {
                serializedName: "slug",
                required: true,
                type: {
                    name: "String"
                }
            },
            isDefault: {
                serializedName: "isDefault",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            inputDataSchema: {
                serializedName: "inputDataSchema",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            inputData: {
                serializedName: "inputData",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            managementGroupId: {
                serializedName: "managementGroupId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            subscriptionIds: {
                serializedName: "subscriptionIds",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Uuid"
                        }
                    }
                }
            },
            authorizable: {
                serializedName: "authorizable",
                type: {
                    name: "Boolean"
                }
            },
            authorized: {
                serializedName: "authorized",
                type: {
                    name: "Boolean"
                }
            },
            authorizeUrl: {
                serializedName: "authorizeUrl",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            componentTypes: {
                serializedName: "componentTypes",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentScopeDefinition = {
    type: {
        name: "Composite",
        className: "DeploymentScopeDefinition",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            slug: {
                serializedName: "slug",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            inputData: {
                serializedName: "inputData",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            isDefault: {
                serializedName: "isDefault",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const DeploymentScopeDataResult = {
    type: {
        name: "Composite",
        className: "DeploymentScopeDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "DeploymentScope"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommandAuditEntityListDataResult = {
    type: {
        name: "Composite",
        className: "CommandAuditEntityListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CommandAuditEntity"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommandAuditEntity = {
    type: {
        name: "Composite",
        className: "CommandAuditEntity",
        modelProperties: {
            commandId: {
                serializedName: "commandId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            organizationId: {
                serializedName: "organizationId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            commandJson: {
                serializedName: "commandJson",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            resultJson: {
                serializedName: "resultJson",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            projectId: {
                serializedName: "projectId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            userId: {
                serializedName: "userId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            parentId: {
                serializedName: "parentId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            command: {
                serializedName: "command",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            componentTask: {
                serializedName: "componentTask",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            runtimeStatus: {
                serializedName: "runtimeStatus",
                type: {
                    name: "String"
                }
            },
            customStatus: {
                serializedName: "customStatus",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            errors: {
                serializedName: "errors",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            created: {
                serializedName: "created",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            updated: {
                serializedName: "updated",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const CommandAuditEntityDataResult = {
    type: {
        name: "Composite",
        className: "CommandAuditEntityDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "CommandAuditEntity"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StringListDataResult = {
    type: {
        name: "Composite",
        className: "StringListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OrganizationListDataResult = {
    type: {
        name: "Composite",
        className: "OrganizationListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Organization"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Organization = {
    type: {
        name: "Composite",
        className: "Organization",
        modelProperties: {
            tenant: {
                serializedName: "tenant",
                required: true,
                type: {
                    name: "String"
                }
            },
            slug: {
                serializedName: "slug",
                required: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            resourceId: {
                serializedName: "resourceId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            resourceState: {
                serializedName: "resourceState",
                type: {
                    name: "String"
                }
            },
            secretsVaultId: {
                serializedName: "secretsVaultId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            galleryId: {
                serializedName: "galleryId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            registryId: {
                serializedName: "registryId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            storageId: {
                serializedName: "storageId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OrganizationDefinition = {
    type: {
        name: "Composite",
        className: "OrganizationDefinition",
        modelProperties: {
            slug: {
                serializedName: "slug",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const OrganizationDataResult = {
    type: {
        name: "Composite",
        className: "OrganizationDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "Organization"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserListDataResult = {
    type: {
        name: "Composite",
        className: "UserListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "User"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const User = {
    type: {
        name: "Composite",
        className: "User",
        modelProperties: {
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String"
                }
            },
            organizationName: {
                serializedName: "organizationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            loginName: {
                serializedName: "loginName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            mailAddress: {
                serializedName: "mailAddress",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            userType: {
                serializedName: "userType",
                required: true,
                type: {
                    name: "String"
                }
            },
            role: {
                serializedName: "role",
                required: true,
                type: {
                    name: "String"
                }
            },
            projectMemberships: {
                serializedName: "projectMemberships",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProjectMembership"
                        }
                    }
                }
            },
            alternateIdentities: {
                serializedName: "alternateIdentities",
                type: {
                    name: "Composite",
                    className: "UserAlternateIdentities"
                }
            },
            properties: {
                serializedName: "properties",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectMembership = {
    type: {
        name: "Composite",
        className: "ProjectMembership",
        modelProperties: {
            projectId: {
                serializedName: "projectId",
                required: true,
                type: {
                    name: "String"
                }
            },
            role: {
                serializedName: "role",
                required: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const UserAlternateIdentities = {
    type: {
        name: "Composite",
        className: "UserAlternateIdentities",
        modelProperties: {
            azureResourceManager: {
                serializedName: "AzureResourceManager",
                type: {
                    name: "Composite",
                    className: "AlternateIdentity"
                }
            },
            azureDevOps: {
                serializedName: "AzureDevOps",
                type: {
                    name: "Composite",
                    className: "AlternateIdentity"
                }
            },
            gitHub: {
                serializedName: "GitHub",
                type: {
                    name: "Composite",
                    className: "AlternateIdentity"
                }
            },
            kubernetes: {
                serializedName: "Kubernetes",
                type: {
                    name: "Composite",
                    className: "AlternateIdentity"
                }
            }
        }
    }
};
const AlternateIdentity = {
    type: {
        name: "Composite",
        className: "AlternateIdentity",
        modelProperties: {
            login: {
                serializedName: "login",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserDefinition = {
    type: {
        name: "Composite",
        className: "UserDefinition",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                required: true,
                type: {
                    name: "String"
                }
            },
            role: {
                serializedName: "role",
                required: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const UserDataResult = {
    type: {
        name: "Composite",
        className: "UserDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "User"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectListDataResult = {
    type: {
        name: "Composite",
        className: "ProjectListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Project"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Project = {
    type: {
        name: "Composite",
        className: "Project",
        modelProperties: {
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String"
                }
            },
            organizationName: {
                serializedName: "organizationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            slug: {
                serializedName: "slug",
                required: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            template: {
                serializedName: "template",
                required: true,
                type: {
                    name: "String"
                }
            },
            templateInput: {
                serializedName: "templateInput",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            users: {
                serializedName: "users",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "User"
                        }
                    }
                }
            },
            tags: {
                serializedName: "tags",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            resourceId: {
                serializedName: "resourceId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            resourceState: {
                serializedName: "resourceState",
                type: {
                    name: "String"
                }
            },
            vaultId: {
                serializedName: "vaultId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            sharedVaultId: {
                serializedName: "sharedVaultId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            secretsVaultId: {
                serializedName: "secretsVaultId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            storageId: {
                serializedName: "storageId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            deleted: {
                serializedName: "deleted",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            ttl: {
                serializedName: "ttl",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectDefinition = {
    type: {
        name: "Composite",
        className: "ProjectDefinition",
        modelProperties: {
            slug: {
                serializedName: "slug",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            template: {
                serializedName: "template",
                required: true,
                type: {
                    name: "String"
                }
            },
            templateInput: {
                serializedName: "templateInput",
                required: true,
                type: {
                    name: "String"
                }
            },
            users: {
                serializedName: "users",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UserDefinition"
                        }
                    }
                }
            }
        }
    }
};
const ProjectDataResult = {
    type: {
        name: "Composite",
        className: "ProjectDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "Project"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectIdentityListDataResult = {
    type: {
        name: "Composite",
        className: "ProjectIdentityListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProjectIdentity"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectIdentity = {
    type: {
        name: "Composite",
        className: "ProjectIdentity",
        modelProperties: {
            projectId: {
                serializedName: "projectId",
                required: true,
                type: {
                    name: "String"
                }
            },
            projectName: {
                serializedName: "projectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String"
                }
            },
            organizationName: {
                serializedName: "organizationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            deploymentScopeId: {
                serializedName: "deploymentScopeId",
                required: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "Uuid"
                }
            },
            clientId: {
                serializedName: "clientId",
                type: {
                    name: "Uuid"
                }
            },
            clientSecret: {
                serializedName: "clientSecret",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            redirectUrls: {
                serializedName: "redirectUrls",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            objectId: {
                serializedName: "objectId",
                type: {
                    name: "Uuid"
                }
            },
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectIdentityDefinition = {
    type: {
        name: "Composite",
        className: "ProjectIdentityDefinition",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            deploymentScopeId: {
                serializedName: "deploymentScopeId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectIdentityDataResult = {
    type: {
        name: "Composite",
        className: "ProjectIdentityDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "ProjectIdentity"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StringDictionaryDataResult = {
    type: {
        name: "Composite",
        className: "StringDictionaryDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectTemplateListDataResult = {
    type: {
        name: "Composite",
        className: "ProjectTemplateListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProjectTemplate"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectTemplate = {
    type: {
        name: "Composite",
        className: "ProjectTemplate",
        modelProperties: {
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String"
                }
            },
            organizationName: {
                serializedName: "organizationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            slug: {
                serializedName: "slug",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            components: {
                serializedName: "components",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            repository: {
                serializedName: "repository",
                type: {
                    name: "Composite",
                    className: "RepositoryReference"
                }
            },
            description: {
                serializedName: "description",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            isDefault: {
                serializedName: "isDefault",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            inputJsonSchema: {
                serializedName: "inputJsonSchema",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectTemplateDefinition = {
    type: {
        name: "Composite",
        className: "ProjectTemplateDefinition",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            repository: {
                serializedName: "repository",
                type: {
                    name: "Composite",
                    className: "RepositoryDefinition"
                }
            }
        }
    }
};
const RepositoryDefinition = {
    type: {
        name: "Composite",
        className: "RepositoryDefinition",
        modelProperties: {
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            },
            token: {
                serializedName: "token",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectTemplateDataResult = {
    type: {
        name: "Composite",
        className: "ProjectTemplateDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "ProjectTemplate"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TeamCloudInformationDataResult = {
    type: {
        name: "Composite",
        className: "TeamCloudInformationDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "TeamCloudInformation"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TeamCloudInformation = {
    type: {
        name: "Composite",
        className: "TeamCloudInformation",
        modelProperties: {
            imageVersion: {
                serializedName: "imageVersion",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            templateVersion: {
                serializedName: "templateVersion",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScheduleListDataResult = {
    type: {
        name: "Composite",
        className: "ScheduleListDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Schedule"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Schedule = {
    type: {
        name: "Composite",
        className: "Schedule",
        modelProperties: {
            organization: {
                serializedName: "organization",
                required: true,
                type: {
                    name: "String"
                }
            },
            organizationName: {
                serializedName: "organizationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            projectId: {
                serializedName: "projectId",
                required: true,
                type: {
                    name: "String"
                }
            },
            projectName: {
                serializedName: "projectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            enabled: {
                serializedName: "enabled",
                type: {
                    name: "Boolean"
                }
            },
            recurring: {
                serializedName: "recurring",
                type: {
                    name: "Boolean"
                }
            },
            daysOfWeek: {
                serializedName: "daysOfWeek",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            utcHour: {
                serializedName: "utcHour",
                type: {
                    name: "Number"
                }
            },
            utcMinute: {
                serializedName: "utcMinute",
                type: {
                    name: "Number"
                }
            },
            creator: {
                serializedName: "creator",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            created: {
                serializedName: "created",
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedBy: {
                serializedName: "lastUpdatedBy",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            lastUpdated: {
                serializedName: "lastUpdated",
                type: {
                    name: "DateTime"
                }
            },
            lastRun: {
                serializedName: "lastRun",
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            componentTasks: {
                serializedName: "componentTasks",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComponentTaskReference"
                        }
                    }
                }
            },
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComponentTaskReference = {
    type: {
        name: "Composite",
        className: "ComponentTaskReference",
        modelProperties: {
            componentId: {
                serializedName: "componentId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            componentName: {
                serializedName: "componentName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            componentTaskTemplateId: {
                serializedName: "componentTaskTemplateId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            inputJson: {
                serializedName: "inputJson",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScheduleDefinition = {
    type: {
        name: "Composite",
        className: "ScheduleDefinition",
        modelProperties: {
            enabled: {
                serializedName: "enabled",
                type: {
                    name: "Boolean"
                }
            },
            recurring: {
                serializedName: "recurring",
                type: {
                    name: "Boolean"
                }
            },
            daysOfWeek: {
                serializedName: "daysOfWeek",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            utcHour: {
                serializedName: "utcHour",
                type: {
                    name: "Number"
                }
            },
            utcMinute: {
                serializedName: "utcMinute",
                type: {
                    name: "Number"
                }
            },
            componentTasks: {
                serializedName: "componentTasks",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComponentTaskReference"
                        }
                    }
                }
            }
        }
    }
};
const ScheduleDataResult = {
    type: {
        name: "Composite",
        className: "ScheduleDataResult",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Composite",
                    className: "Schedule"
                }
            },
            location: {
                serializedName: "location",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AdapterInformationListDataResult: AdapterInformationListDataResult,
    AdapterInformation: AdapterInformation,
    ErrorResult: ErrorResult,
    ResultError: ResultError,
    ValidationError: ValidationError,
    ComponentListDataResult: ComponentListDataResult,
    Component: Component,
    ComponentDefinition: ComponentDefinition,
    ComponentDataResult: ComponentDataResult,
    StatusResult: StatusResult,
    ComponentTaskListDataResult: ComponentTaskListDataResult,
    ComponentTask: ComponentTask,
    ComponentTaskDefinition: ComponentTaskDefinition,
    ComponentTaskDataResult: ComponentTaskDataResult,
    ComponentTemplateListDataResult: ComponentTemplateListDataResult,
    ComponentTemplate: ComponentTemplate,
    RepositoryReference: RepositoryReference,
    ComponentTemplatePermissions: ComponentTemplatePermissions,
    ComponentTaskTemplate: ComponentTaskTemplate,
    ComponentTaskRunner: ComponentTaskRunner,
    ComponentTemplateDataResult: ComponentTemplateDataResult,
    DeploymentScopeListDataResult: DeploymentScopeListDataResult,
    DeploymentScope: DeploymentScope,
    DeploymentScopeDefinition: DeploymentScopeDefinition,
    DeploymentScopeDataResult: DeploymentScopeDataResult,
    CommandAuditEntityListDataResult: CommandAuditEntityListDataResult,
    CommandAuditEntity: CommandAuditEntity,
    CommandAuditEntityDataResult: CommandAuditEntityDataResult,
    StringListDataResult: StringListDataResult,
    OrganizationListDataResult: OrganizationListDataResult,
    Organization: Organization,
    OrganizationDefinition: OrganizationDefinition,
    OrganizationDataResult: OrganizationDataResult,
    UserListDataResult: UserListDataResult,
    User: User,
    ProjectMembership: ProjectMembership,
    UserAlternateIdentities: UserAlternateIdentities,
    AlternateIdentity: AlternateIdentity,
    UserDefinition: UserDefinition,
    UserDataResult: UserDataResult,
    ProjectListDataResult: ProjectListDataResult,
    Project: Project,
    ProjectDefinition: ProjectDefinition,
    ProjectDataResult: ProjectDataResult,
    ProjectIdentityListDataResult: ProjectIdentityListDataResult,
    ProjectIdentity: ProjectIdentity,
    ProjectIdentityDefinition: ProjectIdentityDefinition,
    ProjectIdentityDataResult: ProjectIdentityDataResult,
    StringDictionaryDataResult: StringDictionaryDataResult,
    ProjectTemplateListDataResult: ProjectTemplateListDataResult,
    ProjectTemplate: ProjectTemplate,
    ProjectTemplateDefinition: ProjectTemplateDefinition,
    RepositoryDefinition: RepositoryDefinition,
    ProjectTemplateDataResult: ProjectTemplateDataResult,
    TeamCloudInformationDataResult: TeamCloudInformationDataResult,
    TeamCloudInformation: TeamCloudInformation,
    ScheduleListDataResult: ScheduleListDataResult,
    Schedule: Schedule,
    ComponentTaskReference: ComponentTaskReference,
    ScheduleDefinition: ScheduleDefinition,
    ScheduleDataResult: ScheduleDataResult
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const deleted = {
    parameterPath: ["options", "deleted"],
    mapper: {
        defaultValue: false,
        serializedName: "deleted",
        type: {
            name: "Boolean"
        }
    }
};
const organizationId = {
    parameterPath: "organizationId",
    mapper: {
        serializedName: "organizationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const projectId = {
    parameterPath: "projectId",
    mapper: {
        serializedName: "projectId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const body = {
    parameterPath: ["options", "body"],
    mapper: ComponentDefinition
};
const componentId = {
    parameterPath: "componentId",
    mapper: {
        serializedName: "componentId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body1 = {
    parameterPath: ["options", "body"],
    mapper: ComponentTaskDefinition
};
const taskId = {
    parameterPath: "taskId",
    mapper: {
        serializedName: "taskId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body2 = {
    parameterPath: ["options", "body"],
    mapper: DeploymentScopeDefinition
};
const deploymentScopeId = {
    parameterPath: "deploymentScopeId",
    mapper: {
        serializedName: "deploymentScopeId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body3 = {
    parameterPath: ["options", "body"],
    mapper: DeploymentScope
};
const timeRange = {
    parameterPath: ["options", "timeRange"],
    mapper: {
        serializedName: "timeRange",
        type: {
            name: "String"
        }
    }
};
const commands = {
    parameterPath: ["options", "commands"],
    mapper: {
        serializedName: "commands",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    }
};
const commandId = {
    parameterPath: "commandId",
    mapper: {
        serializedName: "commandId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        defaultValue: false,
        serializedName: "expand",
        type: {
            name: "Boolean"
        }
    }
};
const body4 = {
    parameterPath: ["options", "body"],
    mapper: OrganizationDefinition
};
const body5 = {
    parameterPath: ["options", "body"],
    mapper: UserDefinition
};
const userId = {
    parameterPath: "userId",
    mapper: {
        serializedName: "userId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body6 = {
    parameterPath: ["options", "body"],
    mapper: User
};
const body7 = {
    parameterPath: ["options", "body"],
    mapper: ProjectDefinition
};
const body8 = {
    parameterPath: ["options", "body"],
    mapper: ProjectIdentityDefinition
};
const projectIdentityId = {
    parameterPath: "projectIdentityId",
    mapper: {
        serializedName: "projectIdentityId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body9 = {
    parameterPath: ["options", "body"],
    mapper: ProjectIdentity
};
const body10 = {
    parameterPath: ["options", "body"],
    mapper: {
        serializedName: "body",
        type: {
            name: "Dictionary",
            value: { type: { name: "String" } }
        }
    }
};
const tagKey = {
    parameterPath: "tagKey",
    mapper: {
        serializedName: "tagKey",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body11 = {
    parameterPath: ["options", "body"],
    mapper: ProjectTemplateDefinition
};
const projectTemplateId = {
    parameterPath: "projectTemplateId",
    mapper: {
        serializedName: "projectTemplateId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body12 = {
    parameterPath: ["options", "body"],
    mapper: ProjectTemplate
};
const body13 = {
    parameterPath: ["options", "body"],
    mapper: ScheduleDefinition
};
const scheduleId = {
    parameterPath: "scheduleId",
    mapper: {
        serializedName: "scheduleId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body14 = {
    parameterPath: ["options", "body"],
    mapper: Schedule
};
const trackingId = {
    parameterPath: "trackingId",
    mapper: {
        serializedName: "trackingId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class TeamCloudContext extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the TeamCloudContext class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param $host server parameter
     * @param options The parameter options
     */
    constructor(credentials, $host, options) {
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if ($host === undefined) {
            throw new Error("'$host' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-teamcloud/1.0.0-beta.1`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        if (!options.credentialScopes) {
            options.credentialScopes = ["openid"];
        }
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: options.endpoint || "{$host}" });
        super(optionsWithDefaults);
        // Parameter assignments
        this.$host = $host;
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class TeamCloud extends TeamCloudContext {
    /**
     * Initializes a new instance of the TeamCloud class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param $host server parameter
     * @param options The parameter options
     */
    constructor(credentials, $host, options) {
        super(credentials, $host, options);
    }
    /**
     * Gets all Adapters.
     * @param options The options parameters.
     */
    getAdapters(options) {
        return this.sendOperationRequest({ options }, getAdaptersOperationSpec);
    }
    /**
     * Gets all Components for a Project.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getComponents(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getComponentsOperationSpec);
    }
    /**
     * Creates a new Project Component.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    createComponent(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, createComponentOperationSpec);
    }
    /**
     * Gets a Project Component.
     * @param componentId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getComponent(componentId, organizationId, projectId, options) {
        return this.sendOperationRequest({ componentId, organizationId, projectId, options }, getComponentOperationSpec);
    }
    /**
     * Deletes an existing Project Component.
     * @param componentId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    deleteComponent(componentId, organizationId, projectId, options) {
        return this.sendOperationRequest({ componentId, organizationId, projectId, options }, deleteComponentOperationSpec);
    }
    /**
     * Gets all Component Tasks.
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param options The options parameters.
     */
    getComponentTasks(organizationId, projectId, componentId, options) {
        return this.sendOperationRequest({ organizationId, projectId, componentId, options }, getComponentTasksOperationSpec);
    }
    /**
     * Creates a new Project Component Task.
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param options The options parameters.
     */
    createComponentTask(organizationId, projectId, componentId, options) {
        return this.sendOperationRequest({ organizationId, projectId, componentId, options }, createComponentTaskOperationSpec);
    }
    /**
     * Gets the Component Task.
     * @param taskId
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param options The options parameters.
     */
    getComponentTask(taskId, organizationId, projectId, componentId, options) {
        return this.sendOperationRequest({ taskId, organizationId, projectId, componentId, options }, getComponentTaskOperationSpec);
    }
    /**
     * Rerun a Project Component Task.
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param taskId
     * @param options The options parameters.
     */
    cancelComponentTask(organizationId, projectId, componentId, taskId, options) {
        return this.sendOperationRequest({ organizationId, projectId, componentId, taskId, options }, cancelComponentTaskOperationSpec);
    }
    /**
     * Cancel an active Project Component Task.
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param taskId
     * @param options The options parameters.
     */
    reRunComponentTask(organizationId, projectId, componentId, taskId, options) {
        return this.sendOperationRequest({ organizationId, projectId, componentId, taskId, options }, reRunComponentTaskOperationSpec);
    }
    /**
     * Gets all Component Templates for a Project.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getComponentTemplates(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getComponentTemplatesOperationSpec);
    }
    /**
     * Gets the Component Template.
     * @param id
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getComponentTemplate(id, organizationId, projectId, options) {
        return this.sendOperationRequest({ id, organizationId, projectId, options }, getComponentTemplateOperationSpec);
    }
    /**
     * Gets all Deployment Scopes.
     * @param organizationId
     * @param options The options parameters.
     */
    getDeploymentScopes(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getDeploymentScopesOperationSpec);
    }
    /**
     * Creates a new Deployment Scope.
     * @param organizationId
     * @param options The options parameters.
     */
    createDeploymentScope(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, createDeploymentScopeOperationSpec);
    }
    /**
     * Gets a Deployment Scope.
     * @param organizationId
     * @param deploymentScopeId
     * @param options The options parameters.
     */
    getDeploymentScope(organizationId, deploymentScopeId, options) {
        return this.sendOperationRequest({ organizationId, deploymentScopeId, options }, getDeploymentScopeOperationSpec);
    }
    /**
     * Updates an existing Deployment Scope.
     * @param organizationId
     * @param deploymentScopeId
     * @param options The options parameters.
     */
    updateDeploymentScope(organizationId, deploymentScopeId, options) {
        return this.sendOperationRequest({ organizationId, deploymentScopeId, options }, updateDeploymentScopeOperationSpec);
    }
    /**
     * Deletes a Deployment Scope.
     * @param organizationId
     * @param deploymentScopeId
     * @param options The options parameters.
     */
    deleteDeploymentScope(organizationId, deploymentScopeId, options) {
        return this.sendOperationRequest({ organizationId, deploymentScopeId, options }, deleteDeploymentScopeOperationSpec);
    }
    /**
     * Initialize a new authorization session for a deployment scope.
     * @param organizationId
     * @param deploymentScopeId
     * @param options The options parameters.
     */
    initializeAuthorization(organizationId, deploymentScopeId, options) {
        return this.sendOperationRequest({ organizationId, deploymentScopeId, options }, initializeAuthorizationOperationSpec);
    }
    /**
     * Negotiates the SignalR connection.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    negotiateSignalR(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, negotiateSignalROperationSpec);
    }
    /**
     * Gets all audit entries.
     * @param organizationId
     * @param options The options parameters.
     */
    getAuditEntries(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getAuditEntriesOperationSpec);
    }
    /**
     * Gets an audit entry.
     * @param commandId
     * @param organizationId
     * @param options The options parameters.
     */
    getAuditEntry(commandId, organizationId, options) {
        return this.sendOperationRequest({ commandId, organizationId, options }, getAuditEntryOperationSpec);
    }
    /**
     * Gets all auditable commands.
     * @param organizationId
     * @param options The options parameters.
     */
    getAuditCommands(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getAuditCommandsOperationSpec);
    }
    /**
     * Gets all Organizations.
     * @param options The options parameters.
     */
    getOrganizations(options) {
        return this.sendOperationRequest({ options }, getOrganizationsOperationSpec);
    }
    /**
     * Creates a new Organization.
     * @param options The options parameters.
     */
    createOrganization(options) {
        return this.sendOperationRequest({ options }, createOrganizationOperationSpec);
    }
    /**
     * Gets an Organization.
     * @param organizationId
     * @param options The options parameters.
     */
    getOrganization(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getOrganizationOperationSpec);
    }
    /**
     * Deletes an existing Organization.
     * @param organizationId
     * @param options The options parameters.
     */
    deleteOrganization(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, deleteOrganizationOperationSpec);
    }
    /**
     * Gets all Users.
     * @param organizationId
     * @param options The options parameters.
     */
    getOrganizationUsers(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getOrganizationUsersOperationSpec);
    }
    /**
     * Creates a new User.
     * @param organizationId
     * @param options The options parameters.
     */
    createOrganizationUser(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, createOrganizationUserOperationSpec);
    }
    /**
     * Gets a User.
     * @param userId
     * @param organizationId
     * @param options The options parameters.
     */
    getOrganizationUser(userId, organizationId, options) {
        return this.sendOperationRequest({ userId, organizationId, options }, getOrganizationUserOperationSpec);
    }
    /**
     * Updates an existing User.
     * @param userId
     * @param organizationId
     * @param options The options parameters.
     */
    updateOrganizationUser(userId, organizationId, options) {
        return this.sendOperationRequest({ userId, organizationId, options }, updateOrganizationUserOperationSpec);
    }
    /**
     * Deletes an existing User.
     * @param userId
     * @param organizationId
     * @param options The options parameters.
     */
    deleteOrganizationUser(userId, organizationId, options) {
        return this.sendOperationRequest({ userId, organizationId, options }, deleteOrganizationUserOperationSpec);
    }
    /**
     * Gets a User A User matching the current authenticated user.
     * @param organizationId
     * @param options The options parameters.
     */
    getOrganizationUserMe(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getOrganizationUserMeOperationSpec);
    }
    /**
     * Updates an existing User.
     * @param organizationId
     * @param options The options parameters.
     */
    updateOrganizationUserMe(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, updateOrganizationUserMeOperationSpec);
    }
    /**
     * Gets all Projects.
     * @param organizationId
     * @param options The options parameters.
     */
    getProjects(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getProjectsOperationSpec);
    }
    /**
     * Creates a new Project.
     * @param organizationId
     * @param options The options parameters.
     */
    createProject(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, createProjectOperationSpec);
    }
    /**
     * Gets a Project.
     * @param projectId
     * @param organizationId
     * @param options The options parameters.
     */
    getProject(projectId, organizationId, options) {
        return this.sendOperationRequest({ projectId, organizationId, options }, getProjectOperationSpec);
    }
    /**
     * Deletes a Project.
     * @param projectId
     * @param organizationId
     * @param options The options parameters.
     */
    deleteProject(projectId, organizationId, options) {
        return this.sendOperationRequest({ projectId, organizationId, options }, deleteProjectOperationSpec);
    }
    /**
     * Gets all Project Identities.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectIdentities(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getProjectIdentitiesOperationSpec);
    }
    /**
     * Creates a new Project Identity.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    createProjectIdentity(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, createProjectIdentityOperationSpec);
    }
    /**
     * Gets a Project Identity.
     * @param projectIdentityId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectIdentity(projectIdentityId, organizationId, projectId, options) {
        return this.sendOperationRequest({ projectIdentityId, organizationId, projectId, options }, getProjectIdentityOperationSpec);
    }
    /**
     * Updates an existing Project Identity.
     * @param projectIdentityId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    updateProjectIdentity(projectIdentityId, organizationId, projectId, options) {
        return this.sendOperationRequest({ projectIdentityId, organizationId, projectId, options }, updateProjectIdentityOperationSpec);
    }
    /**
     * Deletes a Project Identity.
     * @param projectIdentityId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    deleteProjectIdentity(projectIdentityId, organizationId, projectId, options) {
        return this.sendOperationRequest({ projectIdentityId, organizationId, projectId, options }, deleteProjectIdentityOperationSpec);
    }
    /**
     * Gets all Tags for a Project.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectTags(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getProjectTagsOperationSpec);
    }
    /**
     * Creates a new Project Tag.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    createProjectTag(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, createProjectTagOperationSpec);
    }
    /**
     * Updates an existing Project Tag.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    updateProjectTag(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, updateProjectTagOperationSpec);
    }
    /**
     * Gets a Project Tag by Key.
     * @param tagKey
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectTagByKey(tagKey, organizationId, projectId, options) {
        return this.sendOperationRequest({ tagKey, organizationId, projectId, options }, getProjectTagByKeyOperationSpec);
    }
    /**
     * Deletes an existing Project Tag.
     * @param tagKey
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    deleteProjectTag(tagKey, organizationId, projectId, options) {
        return this.sendOperationRequest({ tagKey, organizationId, projectId, options }, deleteProjectTagOperationSpec);
    }
    /**
     * Gets all Project Templates.
     * @param organizationId
     * @param options The options parameters.
     */
    getProjectTemplates(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getProjectTemplatesOperationSpec);
    }
    /**
     * Creates a new Project Template.
     * @param organizationId
     * @param options The options parameters.
     */
    createProjectTemplate(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, createProjectTemplateOperationSpec);
    }
    /**
     * Gets a Project Template.
     * @param projectTemplateId
     * @param organizationId
     * @param options The options parameters.
     */
    getProjectTemplate(projectTemplateId, organizationId, options) {
        return this.sendOperationRequest({ projectTemplateId, organizationId, options }, getProjectTemplateOperationSpec);
    }
    /**
     * Updates an existing Project Template.
     * @param projectTemplateId
     * @param organizationId
     * @param options The options parameters.
     */
    updateProjectTemplate(projectTemplateId, organizationId, options) {
        return this.sendOperationRequest({ projectTemplateId, organizationId, options }, updateProjectTemplateOperationSpec);
    }
    /**
     * Deletes a Project Template.
     * @param projectTemplateId
     * @param organizationId
     * @param options The options parameters.
     */
    deleteProjectTemplate(projectTemplateId, organizationId, options) {
        return this.sendOperationRequest({ projectTemplateId, organizationId, options }, deleteProjectTemplateOperationSpec);
    }
    /**
     * Gets all Users for a Project.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectUsers(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getProjectUsersOperationSpec);
    }
    /**
     * Creates a new Project User
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    createProjectUser(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, createProjectUserOperationSpec);
    }
    /**
     * Gets a Project User by ID or email address.
     * @param userId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectUser(userId, organizationId, projectId, options) {
        return this.sendOperationRequest({ userId, organizationId, projectId, options }, getProjectUserOperationSpec);
    }
    /**
     * Updates an existing Project User.
     * @param userId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    updateProjectUser(userId, organizationId, projectId, options) {
        return this.sendOperationRequest({ userId, organizationId, projectId, options }, updateProjectUserOperationSpec);
    }
    /**
     * Deletes an existing Project User.
     * @param userId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    deleteProjectUser(userId, organizationId, projectId, options) {
        return this.sendOperationRequest({ userId, organizationId, projectId, options }, deleteProjectUserOperationSpec);
    }
    /**
     * Gets a Project User for the calling user.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getProjectUserMe(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getProjectUserMeOperationSpec);
    }
    /**
     * Updates an existing Project User.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    updateProjectUserMe(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, updateProjectUserMeOperationSpec);
    }
    /**
     * Gets information about this TeamCloud deployment.
     * @param options The options parameters.
     */
    getInfo(options) {
        return this.sendOperationRequest({ options }, getInfoOperationSpec);
    }
    /**
     * Gets all Schedule.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getSchedules(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, getSchedulesOperationSpec);
    }
    /**
     * Creates a new Project Schedule.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    createSchedule(organizationId, projectId, options) {
        return this.sendOperationRequest({ organizationId, projectId, options }, createScheduleOperationSpec);
    }
    /**
     * Gets the Schedule.
     * @param scheduleId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    getSchedule(scheduleId, organizationId, projectId, options) {
        return this.sendOperationRequest({ scheduleId, organizationId, projectId, options }, getScheduleOperationSpec);
    }
    /**
     * Updates a Project Schedule.
     * @param scheduleId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    updateSchedule(scheduleId, organizationId, projectId, options) {
        return this.sendOperationRequest({ scheduleId, organizationId, projectId, options }, updateScheduleOperationSpec);
    }
    /**
     * Runs a Project Schedule.
     * @param scheduleId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    runSchedule(scheduleId, organizationId, projectId, options) {
        return this.sendOperationRequest({ scheduleId, organizationId, projectId, options }, runScheduleOperationSpec);
    }
    /**
     * Gets the status of a long-running operation.
     * @param trackingId
     * @param organizationId
     * @param options The options parameters.
     */
    getStatus(trackingId, organizationId, options) {
        return this.sendOperationRequest({ trackingId, organizationId, options }, getStatusOperationSpec);
    }
    /**
     * Gets the status of a long-running operation.
     * @param projectId
     * @param trackingId
     * @param organizationId
     * @param options The options parameters.
     */
    getProjectStatus(projectId, trackingId, organizationId, options) {
        return this.sendOperationRequest({ projectId, trackingId, organizationId, options }, getProjectStatusOperationSpec);
    }
    /**
     * Gets all Projects for a User.
     * @param organizationId
     * @param userId
     * @param options The options parameters.
     */
    getUserProjects(organizationId, userId, options) {
        return this.sendOperationRequest({ organizationId, userId, options }, getUserProjectsOperationSpec);
    }
    /**
     * Gets all Projects for a User.
     * @param organizationId
     * @param options The options parameters.
     */
    getUserProjectsMe(organizationId, options) {
        return this.sendOperationRequest({ organizationId, options }, getUserProjectsMeOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getAdaptersOperationSpec = {
    path: "/adapters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AdapterInformationListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const getComponentsOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ComponentListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    queryParameters: [deleted],
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept],
    serializer
};
const createComponentOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: ComponentDataResult
        },
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        },
        409: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body,
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getComponentOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ComponentDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        componentId
    ],
    headerParameters: [accept],
    serializer
};
const deleteComponentOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: StatusResult
        },
        204: {
            bodyMapper: ComponentDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        componentId
    ],
    headerParameters: [accept],
    serializer
};
const getComponentTasksOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ComponentTaskListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        componentId
    ],
    headerParameters: [accept],
    serializer
};
const createComponentTaskOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: ComponentTaskDataResult
        },
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        },
        409: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body1,
    urlParameters: [
        $host,
        organizationId,
        projectId,
        componentId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getComponentTaskOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{taskId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ComponentTaskDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        componentId,
        taskId
    ],
    headerParameters: [accept],
    serializer
};
const cancelComponentTaskOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{taskId}/cancel",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ComponentTaskDataResult
        },
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        componentId,
        taskId
    ],
    headerParameters: [accept],
    serializer
};
const reRunComponentTaskOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{taskId}/rerun",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: ComponentTaskDataResult
        },
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        componentId,
        taskId
    ],
    headerParameters: [accept],
    serializer
};
const getComponentTemplatesOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/templates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ComponentTemplateListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept],
    serializer
};
const getComponentTemplateOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/templates/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ComponentTemplateDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        id
    ],
    headerParameters: [accept],
    serializer
};
const getDeploymentScopesOperationSpec = {
    path: "/orgs/{organizationId}/scopes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentScopeListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [$host, organizationId],
    headerParameters: [accept],
    serializer
};
const createDeploymentScopeOperationSpec = {
    path: "/orgs/{organizationId}/scopes",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: DeploymentScopeDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        409: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body2,
    urlParameters: [$host, organizationId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getDeploymentScopeOperationSpec = {
    path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentScopeDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        deploymentScopeId
    ],
    headerParameters: [accept],
    serializer
};
const updateDeploymentScopeOperationSpec = {
    path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DeploymentScopeDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body3,
    urlParameters: [
        $host,
        organizationId,
        deploymentScopeId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteDeploymentScopeOperationSpec = {
    path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
    httpMethod: "DELETE",
    responses: {
        204: {
            bodyMapper: DeploymentScopeDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        deploymentScopeId
    ],
    headerParameters: [accept],
    serializer
};
const initializeAuthorizationOperationSpec = {
    path: "/orgs/{organizationId}/scopes/{deploymentScopeId}/authorize/initialize",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentScopeDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [
        $host,
        organizationId,
        deploymentScopeId
    ],
    headerParameters: [accept],
    serializer
};
const negotiateSignalROperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/negotiate",
    httpMethod: "POST",
    responses: { 200: {}, 401: {}, 403: {} },
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    serializer
};
const getAuditEntriesOperationSpec = {
    path: "/orgs/{organizationId}/audit",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommandAuditEntityListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    queryParameters: [timeRange, commands],
    urlParameters: [$host, organizationId],
    headerParameters: [accept],
    serializer
};
const getAuditEntryOperationSpec = {
    path: "/orgs/{organizationId}/audit/{commandId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommandAuditEntityDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    queryParameters: [expand],
    urlParameters: [
        $host,
        organizationId,
        commandId
    ],
    headerParameters: [accept],
    serializer
};
const getAuditCommandsOperationSpec = {
    path: "/orgs/{organizationId}/audit/commands",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StringListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [$host, organizationId],
    headerParameters: [accept],
    serializer
};
const getOrganizationsOperationSpec = {
    path: "/orgs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OrganizationListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const createOrganizationOperationSpec = {
    path: "/orgs",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: OrganizationDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        },
        409: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body4,
    urlParameters: [$host],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getOrganizationOperationSpec = {
    path: "/orgs/{organizationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OrganizationDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [$host, organizationId],
    headerParameters: [accept],
    serializer
};
const deleteOrganizationOperationSpec = {
    path: "/orgs/{organizationId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: StatusResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [$host, organizationId],
    headerParameters: [accept],
    serializer
};
const getOrganizationUsersOperationSpec = {
    path: "/orgs/{organizationId}/users",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [$host, organizationId],
    headerParameters: [accept],
    serializer
};
const createOrganizationUserOperationSpec = {
    path: "/orgs/{organizationId}/users",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: UserDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        },
        409: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body5,
    urlParameters: [$host, organizationId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getOrganizationUserOperationSpec = {
    path: "/orgs/{organizationId}/users/{userId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        userId
    ],
    headerParameters: [accept],
    serializer
};
const updateOrganizationUserOperationSpec = {
    path: "/orgs/{organizationId}/users/{userId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: UserDataResult
        },
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body6,
    urlParameters: [
        $host,
        organizationId,
        userId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteOrganizationUserOperationSpec = {
    path: "/orgs/{organizationId}/users/{userId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: StatusResult
        },
        204: {
            bodyMapper: UserDataResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        userId
    ],
    headerParameters: [accept],
    serializer
};
const getOrganizationUserMeOperationSpec = {
    path: "/orgs/{organizationId}/me",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [$host, organizationId],
    headerParameters: [accept],
    serializer
};
const updateOrganizationUserMeOperationSpec = {
    path: "/orgs/{organizationId}/me",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: UserDataResult
        },
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body6,
    urlParameters: [$host, organizationId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getProjectsOperationSpec = {
    path: "/orgs/{organizationId}/projects",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProjectListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [$host, organizationId],
    headerParameters: [accept],
    serializer
};
const createProjectOperationSpec = {
    path: "/orgs/{organizationId}/projects",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: ProjectDataResult
        },
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        409: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body7,
    urlParameters: [$host, organizationId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getProjectOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProjectDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept],
    serializer
};
const deleteProjectOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept],
    serializer
};
const getProjectIdentitiesOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/identities",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProjectIdentityListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept],
    serializer
};
const createProjectIdentityOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/identities",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: ProjectIdentityDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        409: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body8,
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getProjectIdentityOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProjectIdentityDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        projectIdentityId
    ],
    headerParameters: [accept],
    serializer
};
const updateProjectIdentityOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
    httpMethod: "PUT",
    responses: {
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body9,
    urlParameters: [
        $host,
        organizationId,
        projectId,
        projectIdentityId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteProjectIdentityOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
    httpMethod: "DELETE",
    responses: {
        204: {
            bodyMapper: ProjectIdentityDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        projectIdentityId
    ],
    headerParameters: [accept],
    serializer
};
const getProjectTagsOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StringDictionaryDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept],
    serializer
};
const createProjectTagOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags",
    httpMethod: "POST",
    responses: {
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        },
        409: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body10,
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const updateProjectTagOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags",
    httpMethod: "PUT",
    responses: {
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body10,
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getProjectTagByKeyOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StringDictionaryDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        tagKey
    ],
    headerParameters: [accept],
    serializer
};
const deleteProjectTagOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        tagKey
    ],
    headerParameters: [accept],
    serializer
};
const getProjectTemplatesOperationSpec = {
    path: "/orgs/{organizationId}/templates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProjectTemplateListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [$host, organizationId],
    headerParameters: [accept],
    serializer
};
const createProjectTemplateOperationSpec = {
    path: "/orgs/{organizationId}/templates",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: ProjectTemplateDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        409: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body11,
    urlParameters: [$host, organizationId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getProjectTemplateOperationSpec = {
    path: "/orgs/{organizationId}/templates/{projectTemplateId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProjectTemplateDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectTemplateId
    ],
    headerParameters: [accept],
    serializer
};
const updateProjectTemplateOperationSpec = {
    path: "/orgs/{organizationId}/templates/{projectTemplateId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ProjectTemplateDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body12,
    urlParameters: [
        $host,
        organizationId,
        projectTemplateId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteProjectTemplateOperationSpec = {
    path: "/orgs/{organizationId}/templates/{projectTemplateId}",
    httpMethod: "DELETE",
    responses: {
        204: {
            bodyMapper: ProjectTemplateDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectTemplateId
    ],
    headerParameters: [accept],
    serializer
};
const getProjectUsersOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept],
    serializer
};
const createProjectUserOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: UserDataResult
        },
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        },
        409: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body5,
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getProjectUserOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        userId
    ],
    headerParameters: [accept],
    serializer
};
const updateProjectUserOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: UserDataResult
        },
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body6,
    urlParameters: [
        $host,
        organizationId,
        projectId,
        userId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteProjectUserOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        userId
    ],
    headerParameters: [accept],
    serializer
};
const getProjectUserMeOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/me",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept],
    serializer
};
const updateProjectUserMeOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/me",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: UserDataResult
        },
        202: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body6,
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getInfoOperationSpec = {
    path: "/",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TeamCloudInformationDataResult
        }
    },
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const getSchedulesOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/schedules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScheduleListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept],
    serializer
};
const createScheduleOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/schedules",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: ScheduleDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        },
        409: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body13,
    urlParameters: [
        $host,
        organizationId,
        projectId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getScheduleOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScheduleDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        scheduleId
    ],
    headerParameters: [accept],
    serializer
};
const updateScheduleOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ScheduleDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        },
        409: {
            bodyMapper: ErrorResult
        }
    },
    requestBody: body14,
    urlParameters: [
        $host,
        organizationId,
        projectId,
        scheduleId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const runScheduleOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}/run",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ScheduleDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        scheduleId
    ],
    headerParameters: [accept],
    serializer
};
const getStatusOperationSpec = {
    path: "/orgs/{organizationId}/status/{trackingId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StatusResult
        },
        202: {
            bodyMapper: StatusResult
        },
        302: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        trackingId
    ],
    headerParameters: [accept],
    serializer
};
const getProjectStatusOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/status/{trackingId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StatusResult
        },
        202: {
            bodyMapper: StatusResult
        },
        302: {
            bodyMapper: StatusResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        projectId,
        trackingId
    ],
    headerParameters: [accept],
    serializer
};
const getUserProjectsOperationSpec = {
    path: "/orgs/{organizationId}/users/{userId}/projects",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProjectListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [
        $host,
        organizationId,
        userId
    ],
    headerParameters: [accept],
    serializer
};
const getUserProjectsMeOperationSpec = {
    path: "/orgs/{organizationId}/me/projects",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProjectListDataResult
        },
        400: {
            bodyMapper: ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: ErrorResult
        }
    },
    urlParameters: [$host, organizationId],
    headerParameters: [accept],
    serializer
};

exports.TeamCloud = TeamCloud;
exports.TeamCloudContext = TeamCloudContext;
//# sourceMappingURL=index.js.map
